// import { beforeAll, afterAll, beforeEach, describe, expect, it } from 'vitest';
// import {
// 	createSession,
// 	getSessionById,
// 	getSessionsByUserId,
// 	deleteSessionById,
// 	deleteAllSessionsByUserId,
// 	deleteExpiredSessions
// } from '$lib/server/services/sessionService';

// import { db } from '$lib/server/db';
// import { sql } from 'drizzle-orm';
// import * as schema from '$lib/server/db/schema';
// import { setupDb, teardownDb, testDb } from './db.setup';


// describe('Session Service', () => {
// 	let requestId: string = crypto.randomUUID(); // ensure unique PK
// 	let userId: string = crypto.randomUUID(); // ensure unique PK
// 	let githubId: number = Math.floor(Math.random() * 1_000_000_000); // ensure unique PK

// 	beforeAll(async () => {
// 		await setupDb();
// 	});

// 	beforeEach(async () => {
// 		// Clean the tables before each test
// 		await db.execute(sql`
//       TRUNCATE TABLE "session", "user" RESTART IDENTITY CASCADE;
//     `);

// 		// Insert dummy user for FK reference
// 		await db.insert(schema.user).values({
// 			id: userId,
// 			githubId: githubId,
// 			username: 'sessionuser',
// 			avatar: 'https://avatar.example.com'
// 		});
// 	});

// 	afterAll(async () => {
// 		await teardownDb();
// 	});

// 	it('should create a session', async () => {
// 		const expiresAt = new Date(Date.now() + 1000 * 60 * 60); // 1 hour
// 		const [session] = await createSession(userId, expiresAt);

// 		expect(session.userId).toBe(userId);
// 		expect(new Date(session.expiresAt).getTime()).toBe(expiresAt.getTime());
// 	});

// 	it('should get session by ID', async () => {
// 		const expiresAt = new Date(Date.now() + 3600000);
// 		const [session] = await createSession(userId, expiresAt);

// 		const found = await getSessionById(session.id);
// 		expect(found?.id).toBe(session.id);
// 		expect(found?.userId).toBe(userId);
// 	});

// 	it('should get all sessions for a user', async () => {
// 		const expiresAt = new Date(Date.now() + 3600000);
// 		await createSession(userId, expiresAt);
// 		await createSession(userId, expiresAt);

// 		const sessions = await getSessionsByUserId(userId);
// 		expect(sessions).toHaveLength(2);
// 	});

// 	it('should delete a session by ID', async () => {
// 		const expiresAt = new Date(Date.now() + 3600000);
// 		const [session] = await createSession(userId, expiresAt);

// 		await deleteSessionById(session.id);
// 		const result = await getSessionById(session.id);
// 		expect(result).toBeNull();
// 	});

// 	it('should delete all sessions for a user', async () => {
// 		const expiresAt = new Date(Date.now() + 3600000);
// 		await createSession(userId, expiresAt);
// 		await createSession(userId, expiresAt);

// 		await deleteAllSessionsByUserId(userId);
// 		const sessions = await getSessionsByUserId(userId);
// 		expect(sessions).toHaveLength(0);
// 	});

// 	it('should delete expired sessions only', async () => {
// 		const expired = new Date(Date.now() - 1000 * 60 * 60); // 1 hour ago
// 		const valid = new Date(Date.now() + 1000 * 60 * 60); // 1 hour later

// 		await createSession(userId, expired);
// 		await createSession(userId, valid);

// 		await deleteExpiredSessions();
// 		const sessions = await getSessionsByUserId(userId);
// 		expect(sessions).toHaveLength(1);
// 		expect(new Date(sessions[0].expiresAt).getTime()).toBe(valid.getTime());
// 	});
// });
